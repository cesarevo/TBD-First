/* Напишите что-то*/

CREATE OR REPLACE FUNCTION smth() returns varchar
AS $$
BEGIN 
	return 'рус en';
END
$$ language plpgsql;

SELECT smth();


/* Выведите на экран текущую дату */
create or replace function date_today() returns varchar
as $$
begin
	return now();
end
$$ language plpgsql;

select date_today();



/* Создайте две числовые переменные и присвойте им значение. 
Выполните математические действия с этими числами и выведите результат на экран. */


create or replace function math(x int, y int, OUT sum int, OUT multi int, OUT sub int, OUT div float) 
as $$
begin
    sum = x + y;
    multi = x * y;
    sub = x - y;
    div = x/y;
	
end;
$$ language plpgsql;

select * from math(10,10);

/*Написать программу двумя способами 1 - использование IF, 2 - использование CASE. 
Объявите числовую переменную и присвоейте ей значение. 
Если число равно 
	5 - выведите на экран "Отлично". 
	4 - "Хорошо". 3 - Удовлетворительно". 
	2 - "Неуд". 
	В остальных случаях выведите на экран сообщение, что введённая оценка не верна.  
*/

create or replace function with_if(mark_facebook int) returns varchar
as $$
begin
	if mark_facebook = 5 then return 'Отлично';
	elsif mark_facebook = 4 then return 'Хорошо';
	elsif mark_facebook = 3 then return 'Удовлетворительно';
	elsif mark_facebook = 2 then return 'Неуд';
	else return 'введённая оценка не верна';
	end if;
	
end
$$ language plpgsql;

select with_if(1);



create or replace function with_case(mark_facebook int) returns varchar
as $$
begin
	case
		when mark_facebook = 5 then return 'Отлично';
		when mark_facebook = 4 then return 'Хорошо';
		when mark_facebook = 3 then return 'Удовлетворительно';
		when mark_facebook = 2 then return 'Неуд';
		else return 'введённая оценка не верна';
	end case;
end
$$ language plpgsql;

select with_case(2);



/* 
Задания: написать функцию, входной параметр - начальное число, на выходе - количество чисел, пока не получим 1; 
написать процедуру, которая выводит все числа последовательности. Входной параметр - начальное число.
*/

create or replace function collatz(x int) returns int
as $$
begin
	while x!=1 loop
		case 
			when x%2=0 then x = x/2;
			else x = x*3+1;
		end case;
	end loop;
	return x;
		
end
$$ language plpgsql;

select collatz(3);




CREATE OR REPLACE PROCEDURE collatz_procedure(INOUT x int)
LANGUAGE plpgsql
AS $$
BEGIN
	while x!=1 loop
		CASE 
			WHEN x%2=0 THEN x := x/2;
			else  x := x*3+1;
		END CASE;
	end loop;
END;
$$;

CALL collatz_procedure(5)


/* 
Числа Люка. Объявляем и присваиваем значение переменной - количество числе Люка. 
Вывести на экран последовательность чисел. Где L0 = 2, L1 = 1 ; Ln=Ln-1 + Ln-2 (сумма двух предыдущих чисел). 
Задания: написать фунцию, входной параметр - количество чисел, на выходе - последнее число 
(Например:  входной 5, 2 1 3 4 7 - на выходе число 7); 
написать процедуру, которая выводит все числа последовательности. 
Входной параметр - количество чисел.
*/

create or replace function luke_skywalker(n int) returns int
as $$
begin
	if n = 1 then return 2;
	elsif n = 2 then return 1;
	else return luke_skywalker(n - 1) + luke_skywalker(n - 2);
	end if;
	return -1;
end
$$ language plpgsql;


/* Напишите функцию, которая возвращает количество человек родившихся в заданном году. */
create or replace function peoples_birth(year int) returns int
as $$
declare counter int;
begin
	select 
		count(*) into counter
	from
		people
	where
		year(people.birth_date) = peoples_birth.year;
	return counter;
end
$$ language plpgsql;

select peoples_birth(1995); 


/* Напишите функцию, которая возвращает количество человек с заданным цветом глаз. */
create or replace function eyes(color varchar) returns int
as $$
declare counter int;
begin
	select 
		count(*) into counter
	from
		people
	where
		people.eyes = eyes.color;
	return counter;
end
$$ language plpgsql;

select eyes('brown'); 



/* Напишите функцию, которая возвращает количество человек с заданным цветом глаз. */
create or replace function id_return() returns SETOF int
as $$
begin
	RETURN QUERY 
	select 
		people.id
	from
		people
	order by birth_date desc
	limit 1;
	
end
$$ language plpgsql;

select * from id_return(); 


select luke_skywalker(5);
